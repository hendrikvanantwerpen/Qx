Queues:
 - pull
   this seems to implement a unicast model
 - push
   * unicast
   * multicast
   Subscribers can be added and removed independently and after queue creation.

Delivery:
 - push has retry
   * what if a unicast delivery fails, retry or retry on other?
 - returncode of the push implies delete -> explicit delete as well?
   200 = done, delete please
   202 = takes long, I'll delete later -> special URL for deletion, not the general one?
         can you also touch in this case?
 - can you use the pull api on push queue's?
   They say push messages are not available for polling because they are reserved immediately, so you
   should just get nothing.
   This probably that if you don't subscribe before a message is pushed, you won't get it, even if not all
   subscribers got it yet?
 - a message can be explicitly released, meaning it was not processed and the reservation should end
   touch extends the reservation
 - A pull reserves the message for time X, message is returned to the queue afterwards
   The client can delete the message explicitly (do they make sure only the receiving client does?)
 - Messages expire after 7 days if no one pulled them. Push messages expire after n retries on a subscriber.
 - What if you pull 100 messages and there's only one in the queue?
 - can you delete a message that is not reserved? Also e.g. after the timeout expired.
   can you delete a message that is not reserved by you?

Post:
 - Get an unique message id back.
 - Allow you to check deliviery status.
   
Decision to take HTTP over APMQ:
 - Firewall issues (HTTP is always allowed)
 - API lives in REST.
